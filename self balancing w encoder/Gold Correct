#include <Arduino_LSM6DS3.h>
#include <WiFiNINA.h>

// declare variables linked to motors
const int in1 = 19;   
const int in2 = 18;
const int in3 = 5;
const int in4 = 4;  
const int enA = 2;   
const int enB = 6; 

const char SSID[] = "GroupX1";  //WAP name and password
const char PASSWORD[] = "Team2022";

WiFiServer server(4800);  // first server which sends buggy speed


// declare variables linked to encoder
const int encoder = 12;
int encoderCounter = 0;
double circumference = 6.5 * PI;
int curr_state;
int prev_state;
double curr_time;
double prev_time;
double time_change;
int buggy_speed;

bool forward = false;
bool backward = false;
bool start = false;       //Updates via wifi to start and stop the buggy

void setup() {
  Serial.begin(9600);
  // check IMU initialisation
  if (!IMU.begin()){
    Serial.println("Failed to initialize IMU");
  }

  WiFi.beginAP(SSID, PASSWORD);
  // print IP address
  IPAddress ip = WiFi.localIP();
  Serial.print(ip); 
  server.begin();

  // set pin modes
  pinMode(in1, OUTPUT);  
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

  // encoder
  pinMode(encoder, INPUT_PULLUP);
  prev_state = digitalRead(encoder);
  prev_time = millis();
 
}

void loop() {
  WiFiClient client = server.available();  //create client object for processing
  if (client.connected()) {  //read a character from processing
    char ch = client.read();
    if (ch == 'w') {  //determine if buggy should start or stop
      start = true;
    }

    else if (ch == 's'){
      start = false;
    }
  }

  float aX, aY, aZ;



  if(start){

    // read in acceleration values
    if (IMU.accelerationAvailable()) {     
      IMU.readAcceleration(aX, aY, aZ);
    }

    // set speed 
    analogWrite(enA, (255*0.9));
    analogWrite(enB, (255*0.9));

    // control direction of movement
    // go forward
    if (aY < -0.85 && aZ > 0.2) {
      if (!forward) {
        // only print first time
        forward = true;
        backward = false;
        server.println("Going forward");

      }
      digitalWrite(in1, LOW);  //move forward
      digitalWrite(in2, HIGH);
      digitalWrite(in3, LOW);
      digitalWrite(in4, HIGH);
    }

    // go backwards
    else if (aY < -0.85 && aZ < 0.2) {
      if (!backward) {
        // only print first time
        forward = false;
        backward = true;
        server.println("Going backwards");
      }
      digitalWrite(in1, HIGH);  //move backwards
      digitalWrite(in2, LOW);
      digitalWrite(in3, HIGH);
      digitalWrite(in4, LOW);
    }
    else {
      forward = false;
      backward = false;
    }

    // calculate speed using encoder
    curr_time = millis();
    curr_state = digitalRead(encoder);
    
    if (curr_state != prev_state){
      encoderCounter++;
    }

    // find buggy speed when applicable 
    if (encoderCounter == 480) {
      time_change = (curr_time - prev_time) / 1000;
      buggy_speed = circumference / time_change;

      // update the variables
      prev_time = curr_time;
      encoderCounter = 0;
      // send to  server client
      server.print("Buggy speed is ");
      server.print(buggy_speed);
      server.println("cm/s.");

    }
  }

  if(!start){
    analogWrite(enA, (255*0));
    analogWrite(enB, (255*0));
  }

}
